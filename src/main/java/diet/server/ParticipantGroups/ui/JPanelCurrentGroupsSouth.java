/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package diet.server.ParticipantGroups.ui;

import diet.server.ConversationController.TelegramController;
import diet.server.ConversationController.ui.CustomDialog;
import diet.server.Participant;
import diet.server.ParticipantGroups.ParticipantGroups;
import java.util.Date;
import java.util.Vector;
import javax.swing.event.ChangeEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author gj
 */
public class JPanelCurrentGroupsSouth extends javax.swing.JPanel implements DocumentListener{

    //Conversation c;
    JPanelCurrentGroups jppp;
    ParticipantGroups pp;
    
    /**
     * Creates new form JPanelParticipantPartneringSouth
     */
    public JPanelCurrentGroupsSouth() {
        initComponents();
    }
    
    public JPanelCurrentGroupsSouth(ParticipantGroups pp, JPanelCurrentGroups jppp) {
        this.pp =pp;
        this.jppp=jppp;
        
        
        
        initComponents();
        this.jTextField2.setText("NewGroup001");
        this.jTextField2.getDocument().addDocumentListener(this);
        this.jButton1.setEnabled(false);
        
    }

    @Override
    public void insertUpdate(DocumentEvent de) {
       validateButtonEnabled();
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
       validateButtonEnabled();
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
       validateButtonEnabled();
    }

   
    public void stateChanged(ChangeEvent ce) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        validateButtonEnabled();
    }

    
    
    public void validateButtonEnabled(){
        if(this.jTextField2.getText().length()<1){
            this.jButton1.setEnabled(false);
            return;
        }
        if(this.jppp.jppt.getSelectedRows()==null){
             this.jButton1.setEnabled(false);
             return;
        }
        if(this.jppp.jppt.getSelectedRows().length==0){
             this.jButton1.setEnabled(false);
             return;
        }
        if(this.jppp.jppt.getSelectedRows().length==1){
             this.jButton1.setEnabled(false); 
             return;
        }
        if(this.jppp.jppt.getSelectedRowCount()<2){
            this.jButton1.setEnabled(false); 
            return;
        }
        this.jButton1.setEnabled(true);
         
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Assign participants to new group"));
        setMinimumSize(new java.awt.Dimension(350, 70));
        setPreferredSize(new java.awt.Dimension(350, 70));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Name of new group:");
        jLabel1.setMaximumSize(new java.awt.Dimension(110, 13));
        jLabel1.setPreferredSize(new java.awt.Dimension(110, 13));
        add(jLabel1);

        jTextField2.setMinimumSize(new java.awt.Dimension(40, 19));
        jTextField2.setPreferredSize(new java.awt.Dimension(50, 19));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        add(jTextField2);

        jButton1.setText("CREATE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);

        getAccessibleContext().setAccessibleName("Assign selected participants to new group");
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Vector participantsToSelect = new Vector();

        int[] selectedrows = this.jppp.jppt.getSelectedRows();
        for(int i=0;i<selectedrows.length;i++){
            String pID = (String)this.jppp.jppt.getValueAt(selectedrows[i], 0);
            Participant p =    this.jppp.pp.c.getParticipants().findParticipantWithEmail(pID);
            participantsToSelect.addElement(p);
        }

        String subdialogueID = this.jTextField2.getText();

        boolean showIsTyping=false;
        if (!(this.pp.cC instanceof TelegramController)){
            showIsTyping = CustomDialog.getBoolean("Do you want the participants to get \"is typing\" notifications?");
        }
        
        
        //boolean showIsTyping = CustomDialog.getBoolean("Do you want the participants to get \"is typing\" notifications?");

        if(subdialogueID.equalsIgnoreCase("")){
            subdialogueID = "CREATEDON:"+  new Date().getTime()+"";
        }
        try{
            System.err.println("DEBUGTIME");
            System.err.println("THE TOTAL NUMBER OF PARTICIPANTS BEFORE IS:" +this.jppp.pp.c.getParticipants().getAllParticipants().size());

            pp.createNewSubdialogue(subdialogueID,participantsToSelect);

            pp.cC.itnt.removeAllRecipientsOfTypingInformation(participantsToSelect);

            pp.cC.itnt.removeAllSendersOfTypingInformation(participantsToSelect);

            if(showIsTyping){
                pp.cC.itnt.addGroupWhoAreMutuallyInformedOfTyping(participantsToSelect);
            }

        }catch (Exception e){
            e.printStackTrace();
        }

        System.err.println("DEBUGTIME");
        System.err.println("THE TOTAL NUMBER OF PARTICIPANTS AFTER IS:" +this.jppp.pp.c.getParticipants().getAllParticipants().size());

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
